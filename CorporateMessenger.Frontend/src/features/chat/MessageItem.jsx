import { useState, useEffect } from 'react';
import {
  Box,
  Text,
  HStack,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuDivider,
  IconButton,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  Button,
  Input,
  FormControl,
  FormLabel,
  useToast,
} from '@chakra-ui/react';
import { HamburgerIcon } from '@chakra-ui/icons';
import { editMessage, deleteMessage, addReaction, removeReaction, getUserInfo } from '../../services/api';

function MessageItem({ message, userId, onUpdate, canDeleteAnyMessages }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editContent, setEditContent] = useState(message.content);
  const [senderInfo, setSenderInfo] = useState({ firstName: '', lastName: '' });
  const toast = useToast();
  const isSender = message.senderId === userId;
  const canEdit = isSender;
  const canDelete = isSender || canDeleteAnyMessages;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  useEffect(() => {
    const fetchSenderInfo = async () => {
      try {
        const info = await getUserInfo(message.senderId);
        setSenderInfo({ firstName: info.firstName, lastName: info.lastName });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        setSenderInfo({ firstName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', lastName: '' });
      }
    };
    fetchSenderInfo();
  }, [message.senderId]);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
  const groupReactions = (reactions) => {
    const grouped = reactions.reduce((acc, reaction) => {
      const type = reaction.reactionType;
      if (!acc[type]) {
        acc[type] = { type, count: 0 };
      }
      acc[type].count += 1;
      return acc;
    }, {});
    return Object.values(grouped);
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleEdit = async () => {
    if (!editContent.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }
    try {
      await editMessage(message.id, { newContent: editContent });
      setIsEditing(false);
      onUpdate();
      toast({
        title: '–£—Å–ø–µ—Ö',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleDelete = async () => {
    try {
      await deleteMessage(message.id);
      onUpdate();
      toast({
        title: '–£—Å–ø–µ—Ö',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
  const handleAddReaction = async (reactionType) => {
    try {
      const currentReaction = message.reactions.find((r) => r.userId === userId);
      if (currentReaction) {
        await removeReaction(message.id);
      }
      await addReaction(message.id, { reactionType });
      onUpdate();
      toast({
        title: '–£—Å–ø–µ—Ö',
        description: '–†–µ–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <>
      <Box
        p={2}
        borderWidth={1}
        borderRadius="md"
        mb={2}
        alignSelf={isSender ? 'flex-end' : 'flex-start'}
        bg={isSender ? '#27AE60' : '#2C3E50'}
        color="white"
        maxW="60%"
        boxShadow="0 2px 8px rgba(0, 0, 0, 0.15)"
      >
        <HStack justify="space-between" align="start">
          <Text fontWeight="bold">{senderInfo.firstName} {senderInfo.lastName}</Text>
          <Menu>
            <MenuButton
              as={IconButton}
              icon={<HamburgerIcon />}
              size="xs"
              variant="ghost"
              color="#7F8C8D"
              _hover={{ color: '#3498DB' }}
            />
            <MenuList bg="#FFFFFF" boxShadow="0 2px 8px rgba(0, 0, 0, 0.15)" w="200px">
              <MenuItem onClick={() => handleAddReaction('Like')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Like üëç
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction('Heart')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Heart ‚ù§Ô∏è
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction('Sad')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Sad üò¢
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction('Happy')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Happy üòä
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction('Cry')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Cry üò≠
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction('Laugh')} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Laugh üòÇ
              </MenuItem>
              <MenuDivider />
              {canEdit && (
                <MenuItem onClick={() => setIsEditing(true)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è
                </MenuItem>
              )}
              {canDelete && (
                <MenuItem onClick={handleDelete} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                  –£–¥–∞–ª–∏—Ç—å üóëÔ∏è
                </MenuItem>
              )}
            </MenuList>
          </Menu>
        </HStack>
        <Text>{message.isDeleted ? '[–£–¥–∞–ª–µ–Ω–æ]' : message.content}</Text>
        <Text fontSize="sm" color="gray.200">
          {new Date(message.sentAt).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          })}
        </Text>
        {message.reactions && message.reactions.length > 0 && (
          <HStack spacing={2} mt={1}>
            {groupReactions(message.reactions).map((reaction, index) => (
              <Text key={index} fontSize="sm">
                {reaction.type === 'Like' && 'üëç'}
                {reaction.type === 'Heart' && '‚ù§Ô∏è'}
                {reaction.type === 'Sad' && 'üò¢'}
                {reaction.type === 'Happy' && 'üòä'}
                {reaction.type === 'Cry' && 'üò≠'}
                {reaction.type === 'Laugh' && 'üòÇ'} {reaction.count}
              </Text>
            ))}
          </HStack>
        )}
      </Box>
      <Modal isOpen={isEditing} onClose={() => setIsEditing(false)}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <FormControl>
              <FormLabel>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</FormLabel>
              <Input
                value={editContent}
                onChange={(e) => setEditContent(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
              />
            </FormControl>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" onClick={handleEdit}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  );
}

export default MessageItem;