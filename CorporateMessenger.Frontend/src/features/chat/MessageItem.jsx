import { useState } from 'react';
import {
  Box,
  Text,
  HStack,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuDivider,
  IconButton,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  Button,
  Input,
  FormControl,
  FormLabel,
  useToast,
} from '@chakra-ui/react';
import { HamburgerIcon } from '@chakra-ui/icons';
import { editMessage, deleteMessage, addReaction, removeReaction } from '../../services/api';

function MessageItem({ message, userId, onUpdate, canDeleteAnyMessages, onReply }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editContent, setEditContent] = useState(message.content);
  const toast = useToast();
  const isSender = message.sender.id === userId; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ senderId –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
  const canEdit = isSender;
  const canDelete = isSender || canDeleteAnyMessages;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —Ä–µ–∞–∫—Ü–∏–∏
  const getEmoji = (reactionType) => {
    switch (reactionType) {
      case 0: return 'üëç'; // Like
      case 1: return '‚ù§Ô∏è'; // Heart
      case 2: return 'üò¢'; // Sad
      case 3: return 'üòä'; // Happy
      case 4: return 'üò≠'; // Cry
      case 5: return 'üòÇ'; // Laugh
      default: return '';
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleEdit = async () => {
    if (!editContent.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }
    try {
      await editMessage(message.id, { newContent: editContent });
      setIsEditing(false);
      onUpdate();
      toast({
        title: '–£—Å–ø–µ—Ö',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleDelete = async () => {
    try {
      await deleteMessage(message.id);
      onUpdate();
      toast({
        title: '–£—Å–ø–µ—Ö',
        description: '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
const getReactionString = (type) => {
  switch (type) {
    case 1: return 'Like';
    case 2: return 'Heart';
    case 3: return 'Sad';
    case 4: return 'Happy';
    case 5: return 'Cry';
    case 6: return 'Laugh';
    default: return '';
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleAddReaction
const handleAddReaction = async (reactionType) => {
  try {
    const reactionString = getReactionString(reactionType); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É
    if (!reactionString) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏');
    }
    await addReaction(message.id, { reactionType: reactionString }); // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
    
    onUpdate();
    toast({
      title: '–£—Å–ø–µ—Ö',
      description: '–†–µ–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', err); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    toast({
      title: '–û—à–∏–±–∫–∞',
      description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.',
      status: 'error',
      duration: 5000,
      isClosable: true,
    });
  }
};

  return (
    <>
      <Box
        p={2}
        borderWidth={1}
        borderRadius="md"
        mb={2}
        alignSelf={isSender ? 'flex-end' : 'flex-start'}
        bg={isSender ? '#27AE60' : '#2C3E50'}
        color="white"
        maxW="60%"
        boxShadow="0 2px 8px rgba(0, 0, 0, 0.15)"
      >
        <HStack justify="space-between" align="start">
          <Text fontWeight="bold">
            {message.sender.firstName} {message.sender.lastName}
          </Text>
          <Menu>
            <MenuButton
              as={IconButton}
              icon={<HamburgerIcon />}
              size="xs"
              variant="ghost"
              color="#7F8C8D"
              _hover={{ color: '#3498DB' }}
                        />
            <MenuList bg="#FFFFFF" boxShadow="0 2px 8px rgba(0, 0, 0, 0.15)" w="200px">
              <MenuItem onClick={() => handleAddReaction(1)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Like üëç
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction(2)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Heart ‚ù§Ô∏è
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction(3)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Sad üò¢
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction(4)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Happy üòä
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction(5)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Cry üò≠
              </MenuItem>
              <MenuItem onClick={() => handleAddReaction(6)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                Laugh üòÇ
              </MenuItem>
              <MenuDivider />
              {/* –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–û—Ç–≤–µ—Ç–∏—Ç—å" */}
              <MenuItem onClick={() => onReply(message.id)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                –û—Ç–≤–µ—Ç–∏—Ç—å üí¨
              </MenuItem>
              {canEdit && (
                <MenuItem onClick={() => setIsEditing(true)} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è
                </MenuItem>
              )}
              {canDelete && (
                <MenuItem onClick={handleDelete} color="#2C3E50" _hover={{ color: '#3498DB' }}>
                  –£–¥–∞–ª–∏—Ç—å üóëÔ∏è
                </MenuItem>
              )}
            </MenuList>
          </Menu>
        </HStack>
        <Text>{message.isDeleted ? '[–£–¥–∞–ª–µ–Ω–æ]' : message.content}</Text>
        <Text fontSize="sm" color="gray.200">
          {new Date(message.sentAt).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          })}
        </Text>
        {message.reactions && message.reactions.length > 0 && (
          <HStack spacing={2} mt={1}>
            {message.reactions
              .filter((reaction) => reaction.reactionCount > 0)
              .map((reaction, index) => (
                <Text key={index} fontSize="xs" color="gray.300">
                  {reaction.reactionCount} {getEmoji(reaction.reactionType)}
                </Text>
              ))}
          </HStack>
        )}
      </Box>
      <Modal isOpen={isEditing} onClose={() => setIsEditing(false)}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <FormControl>
              <FormLabel>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</FormLabel>
              <Input
                value={editContent}
                onChange={(e) => setEditContent(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
              />
            </FormControl>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" onClick={handleEdit}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  );
}

export default MessageItem;